=======================================
TEST FOR MODULE  101-lazy_matrix_mul.py
=======================================

This is a test module for matrix multiplication function ``lazy_matrix_mul(m_a, m_b)``.

    Args:      
        m_a - a list of lists of integers | floats.
        m_b - a list of lists of integers | floats.


================================
Import function form the module:
================================
>>> matrix_mul = __import__('101-lazy_matrix_mul').matrix_mul


=========================
Tests expected to failed
=========================

=================
Missing arguments
=================
>>> print(lazy_matrix_mul())
Traceback (most recent call last):
   ...
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'


>>> lazy_matrix_mul(m_a)
Traceback (most recent call last):
    ...
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

============
Empty Matrix
============

m_a is empty
============
>>> m_a = []
>>> m_b = [[1, 2, 3], [4, 5, 6]]

>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: shapes (0,) and (2, 3) are not aligned: 0 (dim 0) != 2 (dim 0)

m_b is empty
============
>>> m_b = []
>>> m_a = [[1, 2, 3], [4, 5, 6]]

>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: shapes (2,3) and (0,) not aligned: 3 (dim 1) != 0 (dim 0)

>>> lazy_matrix_mul(None, None)
Traceback (most recent call last):
    ...
TypeError: Object arrays are not currently supported

========================================================================
If num of col in m_a != num of row in m_b multiplication is not possible
========================================================================
>>> mb = [[1, 2, 3], [4, 5, 6]]
>>> ma = [[1, 2, 3]]

>>> lazy_matrix_mul(ma, mb)
Traceback (most recent call last):
    ...
ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)

>>> m_a = [[]]
>>> m_b = [[5, 6], [7, 8]]

>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

>>> m_a = [[5, 6], [7, 8]]
>>> m_b = [[]]

>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

===================================================
Row in matrix m_a and m_b are are not the same size 
===================================================
>>> m_b = [[1, 2, 3], [4, 5]]
>>> m_a = [[1, 2, 3], [4, 5, 6]]

>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: setting an array element with a sequence.

>>> m_a = [[1, 2, 3], [4, 5]]
>>> m_b = [[1, 2, 3], [4, 5, 6]]

>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: setting an array element with a sequence.

>>> mb = [[1, 2, 3], [4, 5, 6]]
>>> ma = [[1, 2, 3]]

>>> lazy_matrix_mul(ma, mb)
Traceback (most recent call last):
    ...
ValueError: shapes (1,3) and (2,3) not aligned: 3 (dim 1) != 2 (dim 0)

==================
Wrong element type
==================

m_a is not a list
=================
>>> m_a = "Python"
>>> m_b = [[2, 4, 6]]

>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: Scalar operands are not allowed, use '*' instead

>>> m_a = "Hello"
>>> m_b = [[1, 2], [3, 4], [3, 4]]

>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: Scalar operands are not allowed, use '*' instead


m_b is not a list
=================
>>> m_b = "Iscool"
>>> m_a = [[2, 4, 6], [8, 10, 12]]

>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: Scalar operands are not allowed, use '*' instead

>>> m_a = [[1, 2], [3, 4], [3, 4]]
>>> m_b = "School"

>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: Scalar operands are not allowed, use '*' instead

m_a element is not an int or a float
====================================
>>> m_a = [[2, 4, "hello"], [4, 6, 8]]
>>> m_b = [[10, 12, 14], [4, 5, 6]]

>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: shapes (2,3) and (2,3) not aligned: 3 (dim 1) != 2 (dim 0)


m_b element is not an int or a float
====================================
>>> m_b = [[2, 4, "hello"], [4, 6, 8]]
>>> m_a = [[10, 12, 14], [4, 5, 6]]

>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: shapes (2,3) and (2,3) not aligned: 3 (dim 1) != 2 (dim 0)


list of integers with list of lists of numbers
=============================================
>>> m_a = [1, 2, 3, 4]
>>> m_b = [[5, 6, 1], [7, 8, 9]]

>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)

>>> m_a = [[5, 6, 1], [7, 8, 9]]
>>> m_b = [1, 2, 3, 4]

>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)


list of lists of non-number with list of lists of numbers
=========================================================
>>> m_a = [["write", "good"], ["test", "always"]]
>>> m_b = [[5, 6], [7, 8]]

>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

>>> m_a = [[5, 6], [7, 8]]
>>> m_b = [["write", "good"], ["test", "always"]]

>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

===========
Valid Tests
===========
>>> m_a = [[1, 2],[3, 4]]
>>> m_b = m_a
>>> print(lazy_matrix_mul(m_a, m_b))
[[7, 10], [15, 22]]

=======================
Test 2x3 and 3x2 matrix
======================
>>> m_a = [[1, 2], [3, 4], [3, 4]]
>>> m_b = [[5, 6, 1], [7, 8, 2]]

>>> print(lazy_matrix_mul(m_a, m_b))
[[19, 22, 5], [43, 50, 11], [43, 50, 11]]
