============================
How to use 0-add_integer.py
============================

This is a test module for an integer addition function ``add_integer(a, b=98)``
The function takes two arguments (a, b) integer or float and return the sum of
two numbers as integer. The numbers are typecast to integer  before the addition is done.
The second argument is given a dafault value of 98, if no value is pass in during the function call

Usage
=====

```add_integer(..)``` - returns the addition of its two arguments. The operatiois done using the ``+`` operator


Import function form the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Checking for module docstring:
    >>> module = __import__("0-add_integer").__doc__
    >>> len(module) > 1
    True

Checking for function docstring
    >>> fn = __import__("0-add_integer").add_integer.__doc__
    >>> len(fn) > 1
    True

============
NUMBER TESTS
============

Add two positive integers (1, 2)
    >>> add_integer(1, 2)
    3

Add one positive integer with one negative integer (1, -2)
    >>> add_integer(1, -2)
    -1

Add two negative integer (-1, -3)
    >>> add_integer(-1, -3)
    -4

Add positive float with positive integer (1.4, 2)
    >>> add_integer(1.4, 2)
    3

Add using numeric string values (1, '2') | ('3', 1)
    >> add_integer(1, "2")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    >>> add_integer("-3", 1)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Cast to integer boolen values | (True) | (False, 3)
    >>> add_integer(True)
    99

    >>> add_integer(False, 3)
    3

Add a positive | negative integer with the default function value  (2) | (-2)
    >>> add_integer(2)
    100

    >>> add_integer(-2)
    96

Add a positive | negative float with the default (1.4) | (-1.4)
    >>> add_integer(1.4)
    99

    >>> add_integer(-2.0)
    96

Add  floats values - positive floats | negative floats | positve and negative float
    >>> add_integer(2.0, 2.0)
    4

    >>> add_integer(2.0, -2.0)
    0

    >>> add_integer(-3.0, -2.0)
    -5

Check more than 2 arguments
    >>> add_integer(1, 2, 3)
    Traceback (most recent call last):
        ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Check the type
    >>> type(add_integer(2.0, 1))
    <class 'int'>

WRONG TYPE CHECKING

Add a tuple with the default value
    >>> add_integer((5,1))
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Add a tuple as second argument
    >>> add_integer(2, (5,1))
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Add a list with the default value
    >>> add_integer([])
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Add a list as second argument
    >>> add_integer(23, [])
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer
 
Add a dictionary with the default argument
    >>> add_integer({})
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Add a dictionary as the second argument
    >>> add_integer(12, {})
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Check None inputs (None, None)
    >>> add_integer(None, None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(2, None)
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Check missing one argument - second argument is default
    >>> add_integer()
    Traceback (most recent call last):
        ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

Check strings literals (1, "Hello")
    >>> add_integer(1, "Hello")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    >>> add_integer("Hi")
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer


CHECKING NAN

    >>> add_integer(float('nan'), 3)
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer

    >>> add_integer(3, float('nan'))
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer


CHECKING INFINITY

    >>> add_integer(float("inf"), 3)
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float("inf"), float("inf"))
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(1, float("inf"))
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer
